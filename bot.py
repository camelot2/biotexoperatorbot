import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

TOKEN = '8180023065:AAE0IIRmyPD88XIIOp9xpjr7RFbYxcsENXc'

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
LANGUAGE, CONSUMER_TYPE, NEW_CHOICE = range(3)

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üá∫üáø –é–∑–±–µ–∫ —Ç–∏–ª–∏"), KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º! –ò–ª—Ç–∏–º–æ—Å, —Ç–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ / –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=reply_markup)
    return LANGUAGE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
async def handle_language_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üá∫üáø –é–∑–±–µ–∫ —Ç–∏–ª–∏":
        keyboard = [
            [KeyboardButton("–ê“≥–æ–ª–∏"), KeyboardButton("–Æ—Ä–∏–¥–∏–∫")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ò–ª—Ç–∏–º–æ—Å, —Ç–æ–∏—Ñ–∞–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=reply_markup)
        return CONSUMER_TYPE

    elif text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫":
        keyboard = [
            [KeyboardButton("–§–∏–∑–∏—á–µ—Å–∫–∏–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å"), KeyboardButton("–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è:", reply_markup=reply_markup)
        return CONSUMER_TYPE

    else:
        await update.message.reply_text("–ò–ª—Ç–∏–º–æ—Å, —Ç–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞—à —É—á—É–Ω —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏–Ω–≥ / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return LANGUAGE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–§–∏–∑–∏—á–µ—Å–∫–∏–π" –∏–ª–∏ "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π"
async def handle_consumer_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üá∫üáø –ê“≥–æ–ª–∏" or text == "–§–∏–∑–∏—á–µ—Å–∫–∏–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å":
        keyboard = [
            [KeyboardButton("–¢—É–ª–æ–≤ –º–∏–∫–¥–æ—Ä–∏"), KeyboardButton("–û—Ñ–∏—Å –º–∞–Ω–∑–∏–ª–∏")],
            [KeyboardButton("–•–∏—Å–æ–± —Ä–∞–∫–∞–º–∏–º–Ω–∏ –±–∏–ª–∞–º–∞–Ω"), KeyboardButton("–°–∞–≤–æ–ª –≤–∞ –º—É—Ä–æ–∂–∞–∞—Ç –∫–æ–ª–¥–∏—Ä–∏—à")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–¢–∞–Ω–ª–∞—à —É—á—É–Ω —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥ / –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å", reply_markup=reply_markup)
        return NEW_CHOICE

    elif text == "–Æ—Ä–∏–¥–∏–∫" or text == "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å":
        await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
        return ConversationHandler.END
    
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π.")
        return CONSUMER_TYPE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–æ–≤—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
async def handle_new_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–¢—É–ª–æ–≤ –º–∏–∫–¥–æ—Ä–∏" or text == "–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞":
        await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ / –¢—É–ª–æ–≤ –º–∏–∫–¥–æ—Ä–∏")

    elif text == "–û—Ñ–∏—Å –º–∞–Ω–∑–∏–ª–∏" or text == "–ê–¥—Ä–µ—Å –æ—Ñ–∏—Å–∞":
        await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏: –ê–¥—Ä–µ—Å –æ—Ñ–∏—Å–∞ / –û—Ñ–∏—Å –º–∞–Ω–∑–∏–ª–∏")

    elif text == "–•–∏—Å–æ–± —Ä–∞–∫–∞–º–∏–º–Ω–∏ –±–∏–ª–∞–º–∞–Ω" or text == "–Ø –∑–Ω–∞—é —Å–≤–æ–π –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–∏—Å–∫–∞.")

    elif text == "–°–∞–≤–æ–ª –≤–∞ –º—É—Ä–æ–∂–∞–∞—Ç –∫–æ–ª–¥–∏—Ä–∏—à" or text == "–û—Å—Ç–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ–±—Ä–∞—â–µ–Ω–∏–π":
        await update.message.reply_text("–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –∏ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")

    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π.")

    return NEW_CHOICE

# –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_language_choice)],
            CONSUMER_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_consumer_type)],
            NEW_CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_new_choice)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conversation_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞...")
    app.run_polling()

if __name__ == '__main__':
    main()
